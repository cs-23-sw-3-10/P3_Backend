type Query {
    AllBladeProjects: [BladeProject],

    AllBladeTasks: [BladeTask]
    BladeTaskById(id:ID!):BladeTask
    AllBladeTasksInRange(startDate:String!, endDate:String!, isActive: Boolean):[BladeTask]
    AllBladeTasksPending:[BladeTask]

    AllConflicts: [Conflict]

    AllSchedules: [Schedule]
    ScheduleById(id:ID!):Schedule
    DeleteSchedule(id:ID!):Schedule
    cloneScheduleAndReplace:Schedule

    AllEngineers: [Engineer]
    EngineerById(id:ID!):Engineer

    AllEquipment: [Equipment]
    EquipmentById(id:ID!):Equipment
    EquipmentByType(type:String):[Equipment]

    AllTechnicians: [Technician]
    TechnicianByType(type:String): Technician

    DictionaryAllByCategory(category:String):[Dictionary]

    DeleteBladeProject(id:ID!):BladeProject

    getAllBookings:[Booking]
}

type Mutation{
    createBladeProject(name: String, customer: String, projectLeader: String) :BladeProject
    deleteBladeProject(id:ID!):String

    createBladeTask(bladeTask:BladeTaskInput):BladeTask
    updateStartAndDurationBladeTask(id:ID!, startDate:String, duration:Int, testRig:Int):BladeTask

    CreateEngineer(name:String!, maxWorkHours:Int!):Engineer

    CreateEquipment(type:String!, calibrationExpirationDate:String!, name:String!):Equipment

    CreateTechnician(type:String!, maxWorkHours:Int!, count:Int!):Technician
}

type BladeProject {
    id: ID!
    schedule: Schedule
    startDate: String
    endDate: String
    customer: String
    projectLeader: String
    projectName: String
    color: String
    bladeTasks: [BladeTask]
    resourceOrder: [ResourceOrder]
}
type Dictionary {
    id: ID!
    category: String
    label: String
}

type BladeTask {
    id: ID!
    bladeProject: BladeProject
    startDate: String
    endDate: String
    duration: Int
    testType: String
    attachPeriod: Int
    detachPeriod: Int
    taskName: String
    testRig: Int
    inConflict: Boolean
    bookings: [Booking]
    resourceOrders: [ResourceOrder]
}

type Schedule {
    id: ID!
    isActive: Boolean
    bladeProject: [BladeProject]
    conflicts: [Conflict]
}

type ResourceOrder {
    id: ID!
    resourceName: String
    resourceType: String
    amount: Int
    workHours: Int
    equipmentAssignmentStatus: [Boolean]
}

type Booking {
    id: ID!

    startDate: String
    endDate: String
    duration: Int
    resourceType: String
    workHours: Int
    task: BladeTask
    equipment: Equipment
    engineer: Engineer
    technician: Technician
}

type Engineer {
    id: ID!
    name: String
    workHours: Int
    maxWorkHours: Int
    bookings: [Booking]
}

type Technician {
    id: ID!
    type: String
    workHours: Int
    maxWorkHours: Int
    count: Int
    bookings: [Booking]
}

type Equipment {
    id: ID!
    type: String
    calibrationExpirationDate: String
    name: String
    bookings: [Booking]
}

type Conflict {
    id: ID!
    type: String
    message: String
    schedule: Schedule
}

input BladeProjectInput {
    scheduleId: ID
    startDate: String
    endDate: String
    customer: String
    projectLeader: String
    projectName: String
}

input BladeTaskInput {
    startDate: String
    endDate: String
    duration: Int!
    attachPeriod: Int!
    detachPeriod: Int!
    testRig: Int
    bladeProjectId: ID!
    taskName: String!
    testType: String!
    resourceOrders: [ResourceOrderInput]
}



input ResourceOrderInput {
    resourceType: String
    resourceName: String
    amount: Int
    workHours: Int
    equipmentAssignmentStatus: [Boolean]
}
