type Query {
    AllBladeProjects: [BladeProject],

    AllBladeTasks: [BladeTask]
    BladeTaskById(id:ID!):BladeTask

    AllConflicts: [Conflict]

    AllSchedules: [Schedule]
    ScheduleById(id:ID!):Schedule

    AllEngineers: [Engineer]
    EngineerById(id:ID!):Engineer

    AllEquipment: [Equipment]
    EquipmentById(id:ID!):Equipment
    EquipmentByType(type:String):[Equipment]

    AllTechnicians: [Technician]
    TechnicianByType(type:String): Technician

    DictionaryAllByCategory(category:String):[Dictionary]

    DeleteBladeProject(id:ID!):BladeProject

}

type Mutation{
    createBladeProject(scheduleId: Int, name: String, customer: String, projectLeader: String) :BladeProject
    createBladeTask(bladeTask:BladeTaskInput!):BladeTask
}

type BladeProject {
    id: ID!
    schedule: Schedule
    startDate: String
    endDate: String
    customer: String
    projectLeader: String
    projectName: String
    bladeTasks: [BladeTask]
    resourceOrder: [ResourceOrder]
}
type Dictionary {
    id: ID!
    category: String
    label: String
}

type BladeTask {
    id: ID!
    bladeProject: BladeProject
    startDate: String
    endDate: String
    duration: Int
    testType: String
    attachPeriod: Int
    detachPeriod: Int
    taskName: String
    testRig: Int
    bookings: [Booking]
    resourceOrder: [ResourceOrder]
}

type Schedule {
    id: ID!
    isActive: Boolean
    bladeProject: [BladeProject]
    conflicts: [Conflict]
}

type ResourceOrder {
    id: ID!
    duration: Int
    startDate: String
    endDate: String
    type: String
    workHours: Int
    task: BladeTask
}

type Booking {
    id: ID!
    startDate: String
    endDate: String
    duration: Int
    resourceType: String
    workHours: Int
    task: BladeTask
    equipment: Equipment
    engineer: Engineer
    technician: Technician
}

type Engineer {
    id: ID!
    name: String
    workHours: Int
    maxWorkHours: Int
    bookings: [Booking]
}

type Technician {
    id: ID!
    type: String
    workHours: Int
    maxWorkHours: Int
    count: Int
    bookings: [Booking]
}

type Equipment {
    id: ID!
    type: String
    calibrationExpirationDate: String
    name: String
    bookings: [Booking]
}

type Conflict {
    id: ID!
    type: String
    message: String
    schedule: Schedule
}

input BladeProjectInput {
    scheduleId: ID
    startDate: String
    endDate: String
    customer: String
    projectLeader: String
    projectName: String
}

input BladeTaskInput {
    startDate: String
    endDate: String
    duration: Int
    attachPeriod: Int
    detachPeriod: Int
    testRig: Int
    bladeProjectId: ID
    taskName: String
    testType: String
}

